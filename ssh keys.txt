https://help.ubuntu.com/community/SSH/OpenSSH/Keys

https://support.rackspace.com/how-to/connecting-to-a-server-using-ssh-on-linux-or-mac-os/

http://man.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/ssh-keygen.1?query=ssh-keygen%26sec=1

https://askubuntu.com/questions/53553/how-do-i-retrieve-the-public-key-from-a-ssh-private-key


$ ssh-keygen -t rsa -b 4096 -C "vtraida@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/vtraida/.ssh/id_rsa): vtraida-18key
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in vtraida-18key.
Your public key has been saved in vtraida-18key.pub.
The key fingerprint is:
SHA256:AzuvDIUZq0bgj6WhWO/UfowVqiQK******* *******@gmail.com
The key's randomart image is:



ssh-copy-id -i vtraida-18key.pub vadym_traida@10.25.12.162
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "vtraida-18key.pub"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
Password:

Number of key(s) added:        1

Now try logging into the machine, with:   "ssh 'vadym_traida@10.25.12.162'"
and check to make sure that only the key(s) you wanted were added.

$ ssh testmac
Enter passphrase for key '/Users/vtraida/vtraida-18key': 
Last login: Thu Mar 29 21:37:20 2018 from 10.17.6.101


#add key to agent
$ ssh-add vtraida-18key
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for 'vtraida-18key' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
$ chmod 400 ~/vtraida-18key
$ ssh-add vtraida-18key
Enter passphrase for vtraida-18key:
Bad passphrase, try again for vtraida-18key:
Identity added: vtraida-18key (vtraida-18key)

#show added keys
$ ssh-add -l
4096 SHA256:AzuvDIUZq0bgj6WhWO/UfowVqiQKLskS2n+e7dLOfVg vtraida-18key (RSA)


#Shortcut configuration
#You can set up a connection shortcut by creating a ~/.ssh/config file on your local computer and adding your server and key #details to it.
#Using a text editor, add the following text to the ~/.ssh/config file, changing the values to match your server information:

#Host shortcutName
#HostName serverAddressOrIPAddress
#User remoteUsername
#IdentityFile /path/to/appropriate/ssh/rsa/private/key

$touch ~/.ssh/config
$ nano ~/.ssh/config
  
GNU nano 2.0.6                                                      File: /Users/vadym_traida/.ssh/config

Host test16
HostName 10.25.14.14
User vtraida
IdentityFile ~/vtraida-key18

### ssh key passphrase > keychain

On OSX, the native ssh-add client has a special argument to save the private key's passphrase in the OSX keychain, which means that your normal login will unlock it for use with ssh. On OSX Sierra and later, you also need to configure SSH to always use the keychain (see Step 2 below).

Alternatively you can use a key without a passphrase, but if you prefer the security that's certainly acceptable with this workflow.

Step 1 - Store the key in the keychain
Just do this once:

ssh-add -K ~/.ssh/[your-private-key]

Enter your key passphrase, and you won't be asked for it again.

(If you're on a pre-Sierra version of OSX, you're done, Step 2 is not required.)

Step 2 - Configure SSH to always use the keychain
It seems that OSX Sierra removed the convenient behavior of persisting your keys between logins, and the update to ssh no longer uses the keychain by default. Because of this, you will get prompted to enter the passphrase for a key after you upgrade, and again after each restart.

The solution is fairly simple, and is outlined in this github thread comment. Here's how you set it up:

Ensure you've completed Step 1 above to store the key in the keychain.

If you haven't already, create an ~/.ssh/config file. In other words, in the .ssh directory in your home dir, make a file called config.

In that .ssh/config file, add the following lines:

Host *
  UseKeychain yes
  AddKeysToAgent yes
  IdentityFile ~/.ssh/id_rsa
Change ~/.ssh/id_rsa to the actual filename of your private key. If you have other private keys in your ~.ssh directory, also add an IdentityFile line for each of them. For example, I have one additional line that reads IdentityFile ~/.ssh/id_ed25519 for a 2nd private key.

The UseKeychain yes is the key part, which tells SSH to look in your OSX keychain for the key passphrase.

That's it! Next time you load any ssh connection, it will try the private keys you've specified, and it will look for their passphrase in the OSX keychain. No passphrase typing required.
